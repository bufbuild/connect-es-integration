// @generated by protoc-gen-es v0.0.6 with parameter "target=ts"
// @generated from file geolocation/v1/geolocation.proto (package geolocation.v1, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3} from "@bufbuild/protobuf";

/**
 * Geolocation describes the location of the client IP.
 *
 * @generated from message geolocation.v1.GeoLocation
 */
export class GeoLocation extends Message<GeoLocation> {
  /**
   * The city the request originated from.
   *
   * @generated from field: string city = 1;
   */
  city = "";

  /**
   * The country the request originated from.
   *
   * @generated from field: string country = 2;
   */
  country = "";

  /**
   * The flag emoji for the country the request originated from
   *
   * @generated from field: string flag = 3;
   */
  flag = "";

  /**
   * The latitude of the client IP.
   *
   * @generated from field: string latitude = 4;
   */
  latitude = "";

  /**
   * The longitude of the client IP.
   *
   * @generated from field: string longitude = 5;
   */
  longitude = "";

  /**
   * The region part of the ISO 3166-2 code of the client IP.
   *
   * @generated from field: string country_region = 6;
   */
  countryRegion = "";

  constructor(data?: PartialMessage<GeoLocation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "geolocation.v1.GeoLocation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "city", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "country", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "flag", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "latitude", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "longitude", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "country_region", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GeoLocation {
    return new GeoLocation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GeoLocation {
    return new GeoLocation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GeoLocation {
    return new GeoLocation().fromJsonString(jsonString, options);
  }

  static equals(a: GeoLocation | PlainMessage<GeoLocation> | undefined, b: GeoLocation | PlainMessage<GeoLocation> | undefined): boolean {
    return proto3.util.equals(GeoLocation, a, b);
  }
}

/**
 * @generated from message geolocation.v1.GetGeoLocationRequest
 */
export class GetGeoLocationRequest extends Message<GetGeoLocationRequest> {
  constructor(data?: PartialMessage<GetGeoLocationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "geolocation.v1.GetGeoLocationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetGeoLocationRequest {
    return new GetGeoLocationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetGeoLocationRequest {
    return new GetGeoLocationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetGeoLocationRequest {
    return new GetGeoLocationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetGeoLocationRequest | PlainMessage<GetGeoLocationRequest> | undefined, b: GetGeoLocationRequest | PlainMessage<GetGeoLocationRequest> | undefined): boolean {
    return proto3.util.equals(GetGeoLocationRequest, a, b);
  }
}

/**
 * @generated from message geolocation.v1.GetGeoLocationResponse
 */
export class GetGeoLocationResponse extends Message<GetGeoLocationResponse> {
  /**
   * @generated from field: geolocation.v1.GeoLocation geo_location = 1;
   */
  geoLocation?: GeoLocation;

  constructor(data?: PartialMessage<GetGeoLocationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "geolocation.v1.GetGeoLocationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "geo_location", kind: "message", T: GeoLocation },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetGeoLocationResponse {
    return new GetGeoLocationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetGeoLocationResponse {
    return new GetGeoLocationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetGeoLocationResponse {
    return new GetGeoLocationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetGeoLocationResponse | PlainMessage<GetGeoLocationResponse> | undefined, b: GetGeoLocationResponse | PlainMessage<GetGeoLocationResponse> | undefined): boolean {
    return proto3.util.equals(GetGeoLocationResponse, a, b);
  }
}

