---
export interface Props {
  name: string
  method: string
  action?: string
}

const { name, method, action } = Astro.props
---

<form name={name} method={method} action={action} id="statement-form">
  <div class="flex flex-row items-center h-16 rounded-xl bg-white w-full px-4">
    <div class="relative w-full">
      <input
        type="text"
        id="statement-input"
        autocomplete="off"
        autofocus
        class="flex w-full border rounded-xl focus:outline-none focus:border-indigo-300 pl-4 h-10"
      />
      <button
        type="button"
        class="absolute flex items-center justify-center h-full w-12 right-0 top-0 text-gray-400 hover:text-gray-600"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M14.828 14.828a4 4 0 01-5.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
      </button>
    </div>
    <button
      id="send-button"
      type="button"
      class="flex items-center justify-center bg-indigo-500 hover:bg-indigo-600 rounded-xl text-white px-4 py-1 flex-shrink-0 ml-4 h-10 disabled:opacity-50"
    >
      <span id="send-button-label">Send</span>
      <span class="ml-2">
        <svg
          class="w-4 h-4 transform rotate-45 -mt-px"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"
          ></path>
        </svg>
      </span>
    </button>
  </div>
</form>

<script>
  import { send } from '../chat'

  const button = document.getElementById('send-button') as HTMLButtonElement
  const form = document.getElementById('statement-form') as HTMLFormElement

  function changeSpanLabel(span: HTMLSpanElement, value = 'Send') {
    span.innerText = value
  }

  function toggleDisableField(field: HTMLInputElement | HTMLButtonElement) {
    field.disabled = !field.disabled
  }

  function clearInput(input: HTMLInputElement) {
    input.value = ''
  }

  function setInputFocus(input: HTMLInputElement) {
    input.focus()
  }

  async function handleClick() {
    const input = document.getElementById('statement-input') as HTMLInputElement

    if (!input.value) {
      return
    }

    const buttonLabel = document.getElementById('send-button-label') as HTMLSpanElement

    changeSpanLabel(buttonLabel, 'Loading...')
    toggleDisableField(button)
    toggleDisableField(input)

    await send(input.value)

    changeSpanLabel(buttonLabel, 'Send')
    toggleDisableField(button)
    toggleDisableField(input)
    clearInput(input)
    setInputFocus(input)
  }

  form.addEventListener('submit', (e) => {
    e.preventDefault()
    handleClick()
  })
  button.addEventListener('click', handleClick)
</script>
